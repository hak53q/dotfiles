format ='\[$username@$hostname\]$character'
right_format = '${custom.cwd}$directory$all$jobs'
add_newline = false

[username]
format = '[$user]($style)'
style_root = 'red bold'
style_user = 'none'
show_always = true
disabled = false

[hostname]
format = '[$hostname]($style)'
style = 'none'
ssh_only = false
disabled = false

[directory]
format = '[$read_only]($read_only_style) '
read_only = ' 󰌾'
read_only_style = 'red bold'

[custom.cwd]
format = '[$output](cyan bold)'
shell = ['fish', '--private', '--no-config']
when = 'true'
command = '''
set -l max_abbrev_len   2
set -l pwd_path (pwd)
set -l comps    (string split '/' $pwd_path)
set comps $comps[2..-1]
set -l total (count $comps)
set -l processed

if string match -q -- "$HOME/*" $pwd_path

    set processed \
        (string sub -s 1 -l $max_abbrev_len -- $comps[1]) \
        (string sub -s 1 -l $max_abbrev_len -- $comps[2])

    set -l rem_list $comps[3..-1]
    set -l rem_count (count $rem_list)

    for idx in (seq 1 $rem_count)
        set comp $rem_list[$idx]

        if test $rem_count -gt $truncation_length -a \
                $idx -le (math $rem_count - $truncation_length)
            set processed $processed \
                (string sub -s 1 -l $max_abbrev_len -- $comp)
        else
            set processed $processed $comp
        end
    end

else

    for i in (seq 1 $total)
        set comp $comps[$i]
        if test $i -le (math $total - $truncation_length)
            set processed $processed \
                (string sub -s 1 -l $max_abbrev_len -- $comp)
        else
            set processed $processed $comp
        end
    end
end

echo /(string join '/' $processed)
''' 

[battery]
disabled = true

[jobs]
format = '[$symbol]($style)'

[character]
disabled = false
success_symbol = '[\$](none)'
error_symbol = '[\$](bright-red)'

[cmd_duration]
min_time = 1000

[status]
format = 'signal [$common_meaning$signal_name$maybe_int]($style) '
disabled = false

[sudo]
format = 'as [$symbol]($style)'
style = 'purple bold'
symbol = 'sudo '
disabled = false

[git_branch]
symbol = 'git '

[git_status]
# conflicted = '='
ahead = '↑'
behind = '↓'
diverged = '~'
# untracked = '?'
# stashed = '\$'
# modified = '!'
# staged = '+'
renamed = '*'
deleted = '×'

[aws]
symbol = 'aws '

[azure]
symbol = 'azure '

[buf]
symbol = 'buf '

[bun]
symbol = 'bun '

[c]
symbol = 'C '

[cpp]
symbol = 'C++ '

[cobol]
symbol = 'cobol '

[conda]
symbol = 'conda '

[container]
symbol = 'container '

[crystal]
symbol = 'crystal '

[cmake]
symbol = 'cmake '

[daml]
symbol = 'daml '

[dart]
symbol = 'dart '

[deno]
symbol = 'deno '

[dotnet]
symbol = '.NET '

[docker_context]
symbol = 'docker '

[elixir]
symbol = 'elixir '

[elm]
symbol = 'elm '

[fennel]
symbol = 'fennel '

[fossil_branch]
symbol = 'fossil '

[gcloud]
symbol = 'gcp '

[gleam]
symbol = 'gleam '

[golang]
symbol = 'go '

[gradle]
symbol = 'gradle '

[guix_shell]
symbol = 'guix '

[haskell]
symbol = 'haskell '

[helm]
symbol = 'helm '

[java]
symbol = 'java '

[julia]
symbol = 'julia '

[kotlin]
symbol = 'kotlin '

[lua]
symbol = 'lua '

[nodejs]
symbol = 'nodejs '

[meson]
symbol = 'meson '

[nats]
symbol = 'nats '

[nim]
symbol = 'nim '

[nix_shell]
symbol = 'nix '

[ocaml]
symbol = 'ocaml '

[opa]
symbol = 'opa '

[package]
symbol = 'pkg '

[perl]
symbol = 'perl '

[php]
symbol = 'php '

[pijul_channel]
symbol = 'pijul '

[pixi]
symbol = 'pixi '

[pulumi]
symbol = 'pulumi '

[purescript]
symbol = 'purescript '

[python]
symbol = 'python '

[quarto]
symbol = 'quarto '

[raku]
symbol = 'raku '

[rlang]
symbol = 'rlang '

[ruby]
symbol = 'ruby '

[rust]
symbol = 'rust '

[scala]
symbol = 'scala '

[spack]
symbol = 'spack '

[solidity]
symbol = 'solidity '

[swift]
symbol = 'swift '

[typst]
symbol = 'typst '

[terraform]
symbol = 'terraform '

[zig]
symbol = 'zig '

[os.symbols]
AIX = 'AIX '
Alpaquita = 'Alpaquita '
AlmaLinux = 'AlmaLinux '
Alpine = 'Alpine '
Amazon = 'Amazon '
Android = 'Android '
Arch = 'Arch '
Artix = 'Artix '
Bluefin = 'Bluefin '
CachyOS = 'CachyOS '
CentOS = 'CentOS '
Debian = 'Debian '
DragonFly = 'DragonFly '
Emscripten = 'Emscripten '
EndeavourOS = 'EndeavourOS '
Fedora = 'Fedora '
FreeBSD = 'FreeBSD '
Garuda = 'Garuda '
Gentoo = 'Gentoo '
HardenedBSD = 'HardenedBSD '
Illumos = 'Illumos '
Kali = 'Kali '
Linux = 'Linux '
Mabox = 'Mabox '
Macos = 'Macos '
Manjaro = 'Manjaro '
Mariner = 'Mariner '
MidnightBSD = 'MidnightBSD '
Mint = 'Mint '
NetBSD = 'NetBSD '
NixOS = 'NixOS '
Nobara = 'Nobara '
OpenBSD = 'OpenBSD '
OpenCloudOS = 'OpenCloudOS '
openEuler = 'openEuler '
openSUSE = 'openSUSE '
OracleLinux = 'OracleLinux '
Pop = 'Pop '
Raspbian = 'Raspbian '
Redhat = 'Redhat '
RedHatEnterprise = 'RedHatEnterprise '
RockyLinux = 'RockyLinux '
Redox = 'Redox '
Solus = 'Solus '
SUSE = 'SUSE '
Ubuntu = 'Ubuntu '
Ultramarine = 'Ultramarine '
Unknown = 'Unknown '
Uos = 'Uos '
Void = 'Void '
Windows = 'Windows '
